[{"/home/pierre/Projects/GithubProjects/conway-react/src/index.tsx":"1","/home/pierre/Projects/GithubProjects/conway-react/src/App.tsx":"2","/home/pierre/Projects/GithubProjects/conway-react/src/context/reducers.ts":"3","/home/pierre/Projects/GithubProjects/conway-react/src/context/initialState.ts":"4","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotControls.tsx":"5","/home/pierre/Projects/GithubProjects/conway-react/src/components/Map.tsx":"6","/home/pierre/Projects/GithubProjects/conway-react/src/components/GameControls.tsx":"7","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox.tsx":"8","/home/pierre/Projects/GithubProjects/conway-react/src/context/actionTypes.ts":"9","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager.tsx":"10","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotComponent.tsx":"11","/home/pierre/Projects/GithubProjects/conway-react/src/context/Bot.ts":"12"},{"size":197,"mtime":1610690693587,"results":"13","hashOfConfig":"14"},{"size":1651,"mtime":1611315889228,"results":"15","hashOfConfig":"14"},{"size":5382,"mtime":1611317061754,"results":"16","hashOfConfig":"14"},{"size":898,"mtime":1611315724757,"results":"17","hashOfConfig":"14"},{"size":503,"mtime":1610794843436,"results":"18","hashOfConfig":"14"},{"size":379,"mtime":1611314983067,"results":"19","hashOfConfig":"14"},{"size":1440,"mtime":1611310914441,"results":"20","hashOfConfig":"14"},{"size":146,"mtime":1610793130268,"results":"21","hashOfConfig":"14"},{"size":350,"mtime":1611315872720,"results":"22","hashOfConfig":"14"},{"size":1769,"mtime":1611315473516,"results":"23","hashOfConfig":"14"},{"size":1108,"mtime":1611302082812,"results":"24","hashOfConfig":"14"},{"size":1681,"mtime":1611315298004,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"199d4ic",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/pierre/Projects/GithubProjects/conway-react/src/index.tsx",[],["54","55"],"/home/pierre/Projects/GithubProjects/conway-react/src/App.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/reducers.ts",["56"],"import { gameActionTypes, botActionTypes } from \"./actionTypes\";\nimport { Bot, IBotLocation } from \"./Bot\";\nimport {\n  IGameState,\n  IBotState,\n  initialBotState,\n  initialGameState,\n  mapDimension,\n  IMapDimensions,\n} from \"./initialState\";\n\nexport interface IActions {\n  type: gameActionTypes | botActionTypes;\n  data?: any;\n}\n\n// GAME METHODS\n// ================\n\nconst gameLoop = (state: IGameState, action: IActions): IGameState => {\n  return {\n    ...state,\n    running: true,\n    intervalID: action.data.intervalID,\n    loopCount: state.loopCount++,\n  };\n};\n\nconst stopGame = (state: IGameState) => {\n  return {\n    ...state,\n    running: false,\n  };\n};\n\n// ==================\n\n// BOT METHODS\n// ==================\n\nconst updateSelectedBots = (bots: Bot[], state: any, data: any): void => {\n  for (let i = 0; i < state.numberOfBots; i++) {\n    if (bots[i].getID() === data.id) {\n      bots[i].setSelected(true);\n    } else {\n      bots[i].setSelected(false);\n    }\n  }\n};\n\n// ==================\n\nexport const gameReducer = (\n  state: IGameState,\n  action: IActions\n): IGameState => {\n  switch (action.type) {\n    case gameActionTypes.RUN_GAME:\n      return gameLoop(state, action);\n\n    case gameActionTypes.STOP_GAME:\n      clearInterval(state.intervalID);\n      return stopGame(state);\n\n    case gameActionTypes.RESET_GAME:\n      clearInterval(state.intervalID);\n\n      return initialGameState();\n\n    default:\n      throw new Error(\n        `Undefined action type: ${action.type} passed to reducer`\n      );\n  }\n};\n\nexport const botReducer = (state: IBotState, action: IActions): IBotState => {\n  switch (action.type) {\n    case botActionTypes.ADD_BOT:\n      const newStartingLocation: IBotLocation = {\n        xPos: state.startingLocation.xPos + 60,\n        yPos: state.startingLocation.yPos,\n      };\n\n      const newBot = new Bot(\"Jeff\", newStartingLocation, state.numberOfBots);\n\n      return {\n        ...state,\n        startingLocation: newStartingLocation,\n        numberOfBots: state.numberOfBots + 1,\n        bots: [...state.bots, newBot],\n      };\n\n    case botActionTypes.RESET_BOTS:\n      return initialBotState();\n\n    case botActionTypes.SELECT_BOT:\n      const botsSelect = state.bots;\n\n      updateSelectedBots(botsSelect, state, action.data);\n\n      return {\n        ...state,\n        bots: botsSelect,\n      };\n\n    case botActionTypes.MOVE_BOT:\n      const direction: number = action.data.direction;\n      const distance: number = action.data.distance;\n      const botsMove: Bot[] = state.bots;\n\n      const selectedBot: Bot = botsMove.filter((bot: Bot) =>\n        bot.isSelected()\n      )[0];\n\n      try {\n        selectedBot.move(direction, distance);\n      } catch (error) {\n        console.warn(\"No bot selected\");\n      }\n\n      return {\n        ...state,\n        bots: botsMove,\n      };\n\n    case botActionTypes.MAP_SETUP:\n      return {\n        ...state,\n        mapDimension: {\n          ...mapDimension,\n          leftOffset: action.data.leftOffset,\n          topOffset: action.data.topOffset,\n        },\n      };\n\n    case botActionTypes.UPDATE_BOT_LOCATION:\n      const bots = state.bots;\n\n      // Get the bot any initialize new direction\n      const bot = bots[0];\n      let botDirection: number | null;\n\n      // Set initial bot location and map status\n      const currLocation: IBotLocation = bot.getLocation();\n      let botInMap = false;\n\n      // while (botInMap === false) {\n      const randDirection = Math.floor(Math.random() * Math.floor(360));\n\n      if (state.loopCount % 5 === 0 || bot.getPrevDirection() === null) {\n        botDirection = randDirection;\n      } else {\n        botDirection = bot.getPrevDirection() as number;\n      }\n\n      const newLocation = getNewLocation(\n        botDirection,\n        action.data.distance,\n        currLocation\n      );\n\n      if (isLocationInMap(newLocation, state.mapDimension)) {\n        botInMap = true;\n        bot.move(botDirection, action.data.distance);\n      }\n      bot.move(botDirection, action.data.distance);\n\n      // }\n\n      return {\n        ...state,\n        loopCount: state.loopCount + 1,\n        bots: bots,\n      };\n\n    default:\n      throw new Error(\n        `Undefined action type: ${action.type} passed to reducer`\n      );\n  }\n};\n\nconst getNewLocation = (\n  deg: number,\n  distance: number,\n  currLocation: IBotLocation\n): IBotLocation => {\n  const currYPos: number = currLocation.yPos;\n  const currXPos: number = currLocation.xPos;\n  const radian = (deg * Math.PI) / 180;\n\n  const newLocation: IBotLocation = {\n    xPos: currXPos + distance * Math.cos(radian),\n    yPos: currYPos + distance * Math.sin(radian),\n  };\n\n  return newLocation;\n};\n\nconst isLocationInMap = (\n  location: IBotLocation,\n  mapDimension: IMapDimensions\n): boolean => {\n  // Get bot boundary\n  const botRight = location.xPos + 50;\n  const botLeft = location.xPos;\n  const botTop = location.yPos;\n  const botBottom = location.yPos + 50;\n\n  // Get map boundary\n  const mapTop = mapDimension.topOffset;\n  const mapRight = mapDimension.leftOffset + mapDimension.width;\n  const mapBottom = mapDimension.topOffset + mapDimension.height;\n  const mapLeft = mapDimension.leftOffset;\n\n  // Check new location is within the map\n  if (\n    botRight <= mapRight &&\n    botLeft >= mapLeft &&\n    botBottom <= mapBottom &&\n    botTop >= mapTop\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n","/home/pierre/Projects/GithubProjects/conway-react/src/context/initialState.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/BotControls.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/Map.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/GameControls.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/actionTypes.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager.tsx",["57"],"import React from \"react\";\nimport { BotContext } from \"../App\";\nimport { botActionTypes } from \"../context/actionTypes\";\nimport { mapDimension } from \"../context/initialState\";\nimport { Bot as BotComponent } from \"./BotComponent\";\n\nexport const BotManager: React.FC = () => {\n  const { botState, botDispatch } = React.useContext(BotContext);\n\n  React.useEffect(() => {\n    window.addEventListener(\"keydown\", (e) => {\n      switch (e.code) {\n        case \"ArrowRight\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 0, distance: 10 },\n          });\n          break;\n\n        case \"ArrowLeft\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 180, distance: 10 },\n          });\n          break;\n\n        case \"ArrowUp\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 270, distance: 10 },\n          });\n          break;\n\n        case \"ArrowDown\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 90, distance: 10 },\n          });\n          break;\n\n        default:\n          break;\n      }\n    });\n  }, []);\n\n  return (\n    <>\n      <h2>Bot manager</h2>\n      <hr />\n      <div\n        id=\"map\"\n        style={{\n          position: \"relative\",\n          width: mapDimension.width,\n          height: mapDimension.height,\n          backgroundColor: \"#d29bd4\",\n        }}\n      >\n        {botState.bots.map((bot: any, i: number) => (\n          <BotComponent\n            key={i}\n            location={bot.getLocation()}\n            name={bot.getName()}\n            selected={bot.isSelected()}\n            id={bot.getID()}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotComponent.tsx",[],["58","59"],"/home/pierre/Projects/GithubProjects/conway-react/src/context/Bot.ts",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":164,"column":9,"nodeType":"66","messageId":"67","endLine":164,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":45,"column":6,"nodeType":"70","endLine":45,"endColumn":8,"suggestions":"71"},{"ruleId":"60","replacedBy":"72"},{"ruleId":"62","replacedBy":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'botInMap' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'botDispatch'. Either include it or remove the dependency array.","ArrayExpression",["76"],["74"],["75"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [botDispatch]",{"range":"79","text":"80"},[1200,1202],"[botDispatch]"]