[{"/home/pierre/Courses/electron/conway-react/src/index.tsx":"1","/home/pierre/Courses/electron/conway-react/src/App.tsx":"2","/home/pierre/Courses/electron/conway-react/src/context/actionTypes.ts":"3","/home/pierre/Courses/electron/conway-react/src/components/Map.tsx":"4","/home/pierre/Courses/electron/conway-react/src/components/BotManager.tsx":"5","/home/pierre/Courses/electron/conway-react/src/utils/randomNumber.ts":"6","/home/pierre/Courses/electron/conway-react/src/classes/Game.ts":"7","/home/pierre/Courses/electron/conway-react/src/classes/Bot.ts":"8","/home/pierre/Courses/electron/conway-react/src/components/BotComponent.tsx":"9","/home/pierre/Courses/electron/conway-react/src/components/GameControls.tsx":"10","/home/pierre/Courses/electron/conway-react/src/context/reducers.ts":"11","/home/pierre/Courses/electron/conway-react/src/classes/BotManager.ts":"12","/home/pierre/Courses/electron/conway-react/src/components/BotControls.tsx":"13"},{"size":197,"mtime":1610690693587,"results":"14","hashOfConfig":"15"},{"size":621,"mtime":1610713393954,"results":"16","hashOfConfig":"15"},{"size":193,"mtime":1610710750846,"results":"17","hashOfConfig":"15"},{"size":309,"mtime":1610709027473,"results":"18","hashOfConfig":"15"},{"size":1600,"mtime":1610714156354,"results":"19","hashOfConfig":"15"},{"size":106,"mtime":1610630288128,"results":"20","hashOfConfig":"15"},{"size":2318,"mtime":1610715067546,"results":"21","hashOfConfig":"15"},{"size":2279,"mtime":1610710297732,"results":"22","hashOfConfig":"15"},{"size":514,"mtime":1610708753060,"results":"23","hashOfConfig":"15"},{"size":1211,"mtime":1610713214923,"results":"24","hashOfConfig":"15"},{"size":1505,"mtime":1610715131590,"results":"25","hashOfConfig":"15"},{"size":596,"mtime":1610713873888,"results":"26","hashOfConfig":"15"},{"size":572,"mtime":1610713375650,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"o24md6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"/home/pierre/Courses/electron/conway-react/src/index.tsx",[],["61","62"],"/home/pierre/Courses/electron/conway-react/src/App.tsx",[],"/home/pierre/Courses/electron/conway-react/src/context/actionTypes.ts",[],"/home/pierre/Courses/electron/conway-react/src/components/Map.tsx",[],"/home/pierre/Courses/electron/conway-react/src/components/BotManager.tsx",["63","64"],"import React, { useEffect } from \"react\";\nimport { mainGame } from \"../App\";\nimport { botActionTypes } from \"../context/actionTypes\";\nimport { botReducer } from \"../context/reducers\";\nimport { Bot } from \"../classes/Bot\";\nimport { Bot as BotComponent } from \"./BotComponent\";\n\nexport const BotManager: React.FC = () => {\n  const [state, dispatch] = React.useReducer(botReducer, mainGame.getState());\n  let bots: Bot[] = [];\n\n  window.addEventListener(\"keyup\", (e) => {\n    switch (e.code) {\n      case \"ArrowRight\":\n        dispatch({\n          type: botActionTypes.MOVE_BOT,\n          data: { direction: \"right\", distance: 10 },\n        });\n        break;\n\n      case \"ArrowLeft\":\n        dispatch({\n          type: botActionTypes.MOVE_BOT,\n          data: { direction: \"left\", distance: 10 },\n        });\n        break;\n\n      case \"ArrowUp\":\n        dispatch({\n          type: botActionTypes.MOVE_BOT,\n          data: { direction: \"up\", distance: 10 },\n        });\n        break;\n\n      case \"ArrowDown\":\n        dispatch({\n          type: botActionTypes.MOVE_BOT,\n          data: { direction: \"down\", distance: 10 },\n        });\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  useEffect(() => {\n    bots = state.botManager.getBots();\n  }, [state]);\n\n  return (\n    <>\n      <h2>Bot manager</h2>\n      <hr />\n      {state &&\n        state.botManager\n          .getBots()\n          .map((bot: any, i: number) => (\n            <BotComponent\n              key={i}\n              location={bot.getLocation()}\n              name={bot.getName()}\n            />\n          ))}\n    </>\n  );\n};\n","/home/pierre/Courses/electron/conway-react/src/utils/randomNumber.ts",[],["65","66"],"/home/pierre/Courses/electron/conway-react/src/classes/Game.ts",[],"/home/pierre/Courses/electron/conway-react/src/classes/Bot.ts",["67"],"export interface IBotLocation {\n  xPos: number;\n  yPos: number;\n}\n\nconst initialStartingLocation: IBotLocation = {\n  xPos: 10,\n  yPos: 10,\n};\n\ninterface IBotState {\n  location: IBotLocation;\n}\n\nconst initialBotState: IBotState = {\n  location: initialStartingLocation,\n};\n\nexport class Bot {\n  static startingLocation: IBotLocation = initialStartingLocation;\n\n  static resetStatingLocation(): void {\n    Bot.startingLocation = initialStartingLocation;\n  }\n\n  private _name: string;\n  private _location: IBotLocation;\n\n  constructor(name: string) {\n    this._name = name;\n    this._location = Bot.startingLocation;\n\n    // Update new starting location for each bot\n    const newStartingLocation: IBotLocation = {\n      xPos: Bot.startingLocation.xPos + 60,\n      yPos: Bot.startingLocation.yPos,\n    };\n    Bot.startingLocation = newStartingLocation;\n  }\n\n  public getState(): IBotState {\n    const state: IBotState = {\n      location: this._location,\n    };\n\n    return state;\n  }\n\n  public getName(): string {\n    return this._name;\n  }\n\n  public getLocation(): IBotLocation {\n    return this._location;\n  }\n\n  public setLocation(value: IBotLocation) {\n    this._location = value;\n  }\n\n  public move(direction: string, distance: number): void {\n    const currXPos = this._location.xPos;\n    const currYPos = this._location.yPos;\n\n    let newLocation: IBotLocation;\n    let newXPos: number;\n    let newYPos: number;\n    switch (direction) {\n      case \"up\":\n        newYPos = currYPos - distance;\n        newLocation = {\n          xPos: currXPos,\n          yPos: newYPos,\n        };\n        break;\n\n      case \"right\":\n        newXPos = currXPos + distance;\n        newLocation = {\n          xPos: newXPos,\n          yPos: currYPos,\n        };\n        break;\n\n      case \"down\":\n        newYPos = currYPos + distance;\n        newLocation = {\n          xPos: currXPos,\n          yPos: newYPos,\n        };\n        break;\n\n      case \"left\":\n        newXPos = currXPos - distance;\n        newLocation = {\n          xPos: newXPos,\n          yPos: currYPos,\n        };\n        break;\n\n      default:\n        throw new Error(\n          `Incorrect direction chosen to move the bot to, choices are: \"up\", \"down\", \"left\",\"right\"`\n        );\n    }\n\n    this.setLocation(newLocation);\n  }\n}\n","/home/pierre/Courses/electron/conway-react/src/components/BotComponent.tsx",[],["68","69"],"/home/pierre/Courses/electron/conway-react/src/components/GameControls.tsx",["70"],"import React from \"react\";\nimport { gameActionTypes } from \"../context/actionTypes\";\nimport { mainGame } from \"../App\";\nimport { gameReducer } from \"../context/reducers\";\n\nexport let intervalID: NodeJS.Timeout;\n\nexport const GameControls: React.FC = () => {\n  const [state, dispatch] = React.useReducer(gameReducer, mainGame.getState());\n\n  const intervalRef: any = React.useRef();\n\n  const handleStartClick = () => {\n    console.log(\"Start Click\");\n    const id: NodeJS.Timeout = setInterval(() => {\n      intervalRef.current = id;\n      return dispatch({\n        type: gameActionTypes.RUN_GAME,\n        data: { running: true, intervalID: intervalRef.current },\n      });\n    }, 1000);\n  };\n\n  const handleStopClick = () => {\n    dispatch({\n      type: gameActionTypes.STOP_GAME,\n      data: { running: false },\n    });\n  };\n\n  const handleResetClick = () => {\n    dispatch({\n      type: gameActionTypes.RESET_GAME,\n      data: { running: false },\n    });\n  };\n\n  return (\n    <div>\n      <h2>Game Controls</h2>\n      <hr />\n      <button onClick={handleStartClick}>Start</button>\n      <button onClick={handleStopClick}>Stop</button>\n      <button onClick={handleResetClick}>Reset</button>\n    </div>\n  );\n};\n","/home/pierre/Courses/electron/conway-react/src/context/reducers.ts",["71"],"/home/pierre/Courses/electron/conway-react/src/classes/BotManager.ts",[],"/home/pierre/Courses/electron/conway-react/src/components/BotControls.tsx",["72"],"import React from \"react\";\nimport { botActionTypes } from \"../context/actionTypes\";\nimport { mainGame } from \"../App\";\nimport { botReducer } from \"../context/reducers\";\n\nexport let intervalID: NodeJS.Timeout;\n\nexport const BotControls: React.FC = () => {\n  const [state, dispatch] = React.useReducer(botReducer, mainGame.getState());\n\n  const handleAddBot = (): void => {\n    dispatch({\n      type: botActionTypes.ADD_BOT,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Bot Controls</h2>\n      <hr />\n      <button onClick={handleAddBot}>Add Bot</button>\n    </div>\n  );\n};\n",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":48,"column":5,"nodeType":"79","messageId":"80","endLine":48,"endColumn":9},{"ruleId":"81","severity":1,"message":"82","line":48,"column":12,"nodeType":"83","endLine":48,"endColumn":38},{"ruleId":"73","replacedBy":"84"},{"ruleId":"75","replacedBy":"85"},{"ruleId":"77","severity":1,"message":"86","line":15,"column":7,"nodeType":"79","messageId":"80","endLine":15,"endColumn":33},{"ruleId":"73","replacedBy":"87"},{"ruleId":"75","replacedBy":"88"},{"ruleId":"77","severity":1,"message":"89","line":9,"column":10,"nodeType":"79","messageId":"80","endLine":9,"endColumn":15},{"ruleId":"77","severity":1,"message":"90","line":4,"column":10,"nodeType":"79","messageId":"80","endLine":4,"endColumn":13},{"ruleId":"77","severity":1,"message":"89","line":9,"column":10,"nodeType":"79","messageId":"80","endLine":9,"endColumn":15},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'bots' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'bots' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["91"],["92"],"'initialBotState' is assigned a value but never used.",["91"],["92"],"'state' is assigned a value but never used.","'Bot' is defined but never used.","no-global-assign","no-unsafe-negation"]