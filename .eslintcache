[{"/home/pierre/Projects/GithubProjects/conway-react/src/index.tsx":"1","/home/pierre/Projects/GithubProjects/conway-react/src/App.tsx":"2","/home/pierre/Projects/GithubProjects/conway-react/src/context/reducers.ts":"3","/home/pierre/Projects/GithubProjects/conway-react/src/context/initialState.ts":"4","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotControls.tsx":"5","/home/pierre/Projects/GithubProjects/conway-react/src/components/Map.tsx":"6","/home/pierre/Projects/GithubProjects/conway-react/src/components/GameControls.tsx":"7","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox.tsx":"8","/home/pierre/Projects/GithubProjects/conway-react/src/context/actionTypes.ts":"9","/home/pierre/Projects/GithubProjects/conway-react/src/classes/BotManager.ts":"10","/home/pierre/Projects/GithubProjects/conway-react/src/classes/GameManager.ts":"11","/home/pierre/Projects/GithubProjects/conway-react/src/classes/Bot.ts":"12","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager.tsx":"13","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotComponent.tsx":"14"},{"size":197,"mtime":1610690693587,"results":"15","hashOfConfig":"16"},{"size":1357,"mtime":1610794088671,"results":"17","hashOfConfig":"16"},{"size":2127,"mtime":1611128821651,"results":"18","hashOfConfig":"16"},{"size":416,"mtime":1610794365010,"results":"19","hashOfConfig":"16"},{"size":503,"mtime":1610794843436,"results":"20","hashOfConfig":"16"},{"size":451,"mtime":1610794811680,"results":"21","hashOfConfig":"16"},{"size":1303,"mtime":1611044405763,"results":"22","hashOfConfig":"16"},{"size":146,"mtime":1610793130268,"results":"23","hashOfConfig":"16"},{"size":276,"mtime":1611044530775,"results":"24","hashOfConfig":"16"},{"size":1013,"mtime":1611048229475,"results":"25","hashOfConfig":"16"},{"size":1117,"mtime":1611044729578,"results":"26","hashOfConfig":"16"},{"size":2564,"mtime":1611045278782,"results":"27","hashOfConfig":"16"},{"size":1464,"mtime":1611045049076,"results":"28","hashOfConfig":"16"},{"size":1065,"mtime":1611046622413,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"199d4ic",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/home/pierre/Projects/GithubProjects/conway-react/src/index.tsx",[],["63","64"],"/home/pierre/Projects/GithubProjects/conway-react/src/App.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/reducers.ts",["65"],"import { gameActionTypes, botActionTypes } from \"./actionTypes\";\nimport { BotManager } from \"../classes/BotManager\";\nimport { Bot } from \"../classes/Bot\";\nimport {\n  IGameState,\n  IBotState,\n  initialBotState,\n  initialGameState,\n} from \"./initialState\";\n\nexport interface IActions {\n  type: gameActionTypes | botActionTypes;\n  data?: any;\n}\n\nconst gameLoop = (state: IGameState): IGameState => {\n  return {\n    ...state,\n    loopCount: state.loopCount++,\n  };\n};\n\nexport const gameReducer = (\n  state: IGameState,\n  action: IActions\n): IGameState => {\n  switch (action.type) {\n    case gameActionTypes.RUN_GAME:\n      return gameLoop(state);\n\n    case gameActionTypes.STOP_GAME:\n      clearInterval(state.intervalID);\n      return {\n        ...state,\n        running: false,\n      };\n\n    case gameActionTypes.RESET_GAME:\n      clearInterval(state.intervalID);\n      return initialGameState;\n\n    default:\n      throw new Error(\n        `Undefined action type: ${action.type} passed to reducer`\n      );\n  }\n};\n\nexport const botReducer = (state: IBotState, action: IActions): IBotState => {\n  switch (action.type) {\n    case botActionTypes.ADD_BOT:\n      const newBot = new Bot(\"Jeff\");\n      return {\n        ...state,\n        numberOfBots: state.numberOfBots++,\n        bots: [...state.bots, newBot],\n      };\n\n    case botActionTypes.RESET_BOTS:\n      return initialBotState;\n\n    case botActionTypes.SELECT_BOT:\n      const bots = state.bots;\n      for (let i = 0; i < state.numberOfBots; i++) {\n        if (bots[i].getID() === action.data.id) {\n          bots[i].setSelected(true);\n        } else {\n          bots[i].setSelected(false);\n        }\n      }\n\n      return {\n        ...state,\n        bots: bots,\n      };\n\n    // case botActionTypes.MOVE_BOT:\n    //   const direction: string = action.data.direction;\n    //   const distance: number = action.data.distance;\n    //   newBots = game.moveBots(direction, distance);\n    //   return {\n    //     ...state,\n    //     bots: newBots,\n    //   };\n\n    default:\n      throw new Error(\n        `Undefined action type: ${action.type} passed to reducer`\n      );\n  }\n};\n","/home/pierre/Projects/GithubProjects/conway-react/src/context/initialState.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/BotControls.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/Map.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/GameControls.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/actionTypes.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/classes/BotManager.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/classes/GameManager.ts",["66"],"import { Bot } from \"./Bot\";\nimport { initialGameState, IGameState } from \"../context/initialState\";\n\nexport class GameManager {\n  private _state: IGameState;\n\n  constructor(state: IGameState = initialGameState) {\n    this._state = state;\n  }\n\n  private _updateLoopCount() {\n    this._state.loopCount = this._state.loopCount + 1;\n  }\n\n  public getState(): IGameState {\n    return this._state;\n  }\n  public setState(value: IGameState) {\n    this._state = value;\n  }\n\n  public runGame = (\n    oldState: IGameState,\n    newStateData: IGameState\n  ): IGameState => {\n    const newState: IGameState = {\n      ...oldState,\n      ...newStateData,\n    };\n\n    this.setState(newState);\n    this._updateLoopCount();\n\n    console.log(\"Game Loop info: \", this._state);\n\n    return this.getState();\n  };\n\n  public stopGame(): IGameState {\n    const prevState = this.getState();\n    const newState: IGameState = {\n      ...prevState,\n      running: true,\n    };\n\n    this.setState(newState);\n    return this.getState();\n  }\n\n  public resetGame(): IGameState {\n    this.setState(initialGameState);\n    return this.getState();\n  }\n}\n",["67","68"],"/home/pierre/Projects/GithubProjects/conway-react/src/classes/Bot.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/BotComponent.tsx",[],["69","70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":20},{"ruleId":"75","severity":1,"message":"79","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":13},{"ruleId":"71","replacedBy":"80"},{"ruleId":"73","replacedBy":"81"},{"ruleId":"71","replacedBy":"82"},{"ruleId":"73","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"@typescript-eslint/no-unused-vars","'BotManager' is defined but never used.","Identifier","unusedVar","'Bot' is defined but never used.",["84"],["85"],["84"],["85"],"no-global-assign","no-unsafe-negation"]