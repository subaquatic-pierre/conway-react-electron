[{"/home/pierre/Projects/GithubProjects/conway-react/src/index.tsx":"1","/home/pierre/Projects/GithubProjects/conway-react/src/App.tsx":"2","/home/pierre/Projects/GithubProjects/conway-react/src/context/reducers.ts":"3","/home/pierre/Projects/GithubProjects/conway-react/src/context/actionTypes.ts":"4","/home/pierre/Projects/GithubProjects/conway-react/src/models/Bot.ts":"5","/home/pierre/Projects/GithubProjects/conway-react/src/utils/generateRandomDirection.ts":"6","/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/index.ts":"7","/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/Matrix.tsx":"8","/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/Row.tsx":"9","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/GameControls.tsx":"10","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/BotControls.tsx":"11","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/index.ts":"12","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/ControlBox.tsx":"13","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/GameStats.tsx":"14","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager/index.ts":"15","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager/BotManager.tsx":"16","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager/Bot.tsx":"17","/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/Cell.tsx":"18","/home/pierre/Projects/GithubProjects/conway-react/src/models/Cell.ts":"19","/home/pierre/Projects/GithubProjects/conway-react/src/context/BotManager.ts":"20","/home/pierre/Projects/GithubProjects/conway-react/src/context/MapManager.ts":"21","/home/pierre/Projects/GithubProjects/conway-react/src/context/GameManager.ts":"22","/home/pierre/Projects/GithubProjects/conway-react/src/context/initialState.ts":"23","/home/pierre/Projects/GithubProjects/conway-react/src/utils/calculateBotStartLocation.ts":"24","/home/pierre/Projects/GithubProjects/conway-react/src/utils/buildMatrix.ts":"25"},{"size":197,"mtime":1610690693587,"results":"26","hashOfConfig":"27"},{"size":1092,"mtime":1611574213388,"results":"28","hashOfConfig":"27"},{"size":2613,"mtime":1611594363898,"results":"29","hashOfConfig":"27"},{"size":832,"mtime":1611564285643,"results":"30","hashOfConfig":"27"},{"size":2307,"mtime":1611579565173,"results":"31","hashOfConfig":"27"},{"size":112,"mtime":1611466052214,"results":"32","hashOfConfig":"27"},{"size":35,"mtime":1611478398827,"results":"33","hashOfConfig":"27"},{"size":527,"mtime":1611573366578,"results":"34","hashOfConfig":"27"},{"size":508,"mtime":1611579810255,"results":"35","hashOfConfig":"27"},{"size":1484,"mtime":1611578579275,"results":"36","hashOfConfig":"27"},{"size":6599,"mtime":1611577151283,"results":"37","hashOfConfig":"27"},{"size":43,"mtime":1611481133650,"results":"38","hashOfConfig":"27"},{"size":379,"mtime":1611577137131,"results":"39","hashOfConfig":"27"},{"size":621,"mtime":1611567486072,"results":"40","hashOfConfig":"27"},{"size":43,"mtime":1611486788809,"results":"41","hashOfConfig":"27"},{"size":1486,"mtime":1611567521865,"results":"42","hashOfConfig":"27"},{"size":1283,"mtime":1611567396607,"results":"43","hashOfConfig":"27"},{"size":573,"mtime":1611579801703,"results":"44","hashOfConfig":"27"},{"size":1330,"mtime":1611565826312,"results":"45","hashOfConfig":"27"},{"size":5250,"mtime":1611594001299,"results":"46","hashOfConfig":"27"},{"size":1896,"mtime":1611573434671,"results":"47","hashOfConfig":"27"},{"size":1301,"mtime":1611594443478,"results":"48","hashOfConfig":"27"},{"size":1549,"mtime":1611574768592,"results":"49","hashOfConfig":"27"},{"size":578,"mtime":1611568738379,"results":"50","hashOfConfig":"27"},{"size":599,"mtime":1611577892104,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"199d4ic",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/pierre/Projects/GithubProjects/conway-react/src/index.tsx",[],["106","107"],"/home/pierre/Projects/GithubProjects/conway-react/src/App.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/reducers.ts",["108","109","110"],"/home/pierre/Projects/GithubProjects/conway-react/src/context/actionTypes.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/models/Bot.ts",["111","112"],"import { ILocation } from \"../context/MapManager\";\nimport { IState } from \"../context/initialState\";\nimport { IDimensions } from \"../context/BotManager\";\nimport { Cell } from \"./Cell\";\n\nexport class Bot {\n  private _name: string;\n  private _location: ILocation;\n  private _id: number;\n  private _selected: boolean;\n  private _prevDirection: number | null;\n\n  private static _baseSize: number = 50;\n\n  public static speed: number = 50;\n\n  public static dimensions: IDimensions = {\n    height: Bot._baseSize,\n    width: Bot._baseSize,\n  };\n\n  public static getMapSizeRatio(ratio: number = 1): number {\n    return Bot._baseSize / ratio;\n  }\n\n  constructor(name: string, startingLocation: ILocation, id: number) {\n    this._name = name;\n    this._location = startingLocation;\n    this._id = id;\n    this._selected = false;\n    this._prevDirection = null;\n  }\n\n  public getName(): string {\n    return this._name;\n  }\n\n  public getID(): number {\n    return this._id;\n  }\n\n  public getLocation(): ILocation {\n    return this._location;\n  }\n\n  public setSelected(value: boolean): void {\n    this._selected = value;\n  }\n\n  public isSelected(): boolean {\n    return this._selected;\n  }\n\n  public setLocation(value: ILocation) {\n    this._location = value;\n  }\n\n  private _calcDirectionRad(deg: number) {\n    const radian = (deg * Math.PI) / 180;\n    return radian;\n  }\n\n  public getPrevDirection(): number | null {\n    return this._prevDirection;\n  }\n\n  public getCellCoOrd(): string {\n    const xCell = Math.ceil((this.getLocation().xPos + Bot._baseSize / 2) / 50);\n    const yCell = Math.ceil((this.getLocation().yPos + Bot._baseSize / 2) / 50);\n    const xCoOrd: string = xCell.toString();\n    const yCoOrd: string = yCell.toString();\n    return `${xCoOrd},${yCoOrd}`;\n  }\n\n  public setPrevDirection(direction: number): void {\n    this._prevDirection = direction;\n  }\n\n  public move(direction: number, distance: number): void {\n    this.setPrevDirection(direction);\n    const currXPos = this._location.xPos;\n    const currYPos = this._location.yPos;\n\n    const directionRad = this._calcDirectionRad(direction);\n\n    const newLocation: ILocation = {\n      xPos: currXPos + distance * Math.cos(directionRad),\n      yPos: currYPos + distance * Math.sin(directionRad),\n    };\n\n    this.setLocation(newLocation);\n  }\n}\n","/home/pierre/Projects/GithubProjects/conway-react/src/utils/generateRandomDirection.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/index.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/Matrix.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/Row.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/GameControls.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/BotControls.tsx",["113","114","115"],"import React from \"react\";\nimport { actionTypes } from \"../../context/actionTypes\";\nimport { Context } from \"../../App\";\nimport { Bot } from \"../../models/Bot\";\nexport let intervalID: NodeJS.Timeout;\n\nexport const BotControls: React.FC = () => {\n  const { state, dispatch } = React.useContext(Context);\n  const [randomWalkChecked, setRandomWalkChecked] = React.useState(false);\n\n  const handleAddBot = (): void => {\n    dispatch({\n      type: actionTypes.ADD_BOT,\n    });\n  };\n\n  const handleRemoveBot = (): void => {\n    // Check number of bots is greater than 0 otherwise reset game\n    if (state.botState.numberOfBots <= 1) {\n      dispatch({\n        type: actionTypes.STOP_GAME,\n        data: { running: false },\n      });\n      dispatch({\n        type: actionTypes.REMOVE_BOT,\n        data: { lastBot: true },\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REMOVE_BOT,\n      });\n    }\n  };\n\n  const handleToggleRandomWalk = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: actionTypes.SET_RANDOM_WALK,\n      data: { randomWalk: e.target.checked },\n    });\n  };\n\n  const handleMatrixSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newSize = Number.parseInt(e.target.value);\n    dispatch({\n      type: actionTypes.SET_MATRIX_SIZE,\n      data: { size: newSize },\n    });\n  };\n\n  const handleBotSpeedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newSpeed = Number.parseInt(e.target.value);\n    clearInterval(state.gameState.intervalID);\n\n    let speedUpdated: boolean = false;\n    const newIntervalTime =\n      newSpeed === 1 ? Bot.speed : Bot.speed - 10 * newSpeed;\n\n    const newIntervalID: NodeJS.Timeout = setInterval(() => {\n      dispatch({\n        type: actionTypes.RUN_GAME,\n        data: { running: true, intervalID: newIntervalID },\n      });\n      dispatch({\n        type: actionTypes.UPDATE_BOT_LOCATION,\n        data: { distance: 1 },\n      });\n      if (!speedUpdated) {\n        dispatch({\n          type: actionTypes.SET_BOT_SPEED,\n          data: { speed: newSpeed },\n        });\n      }\n      speedUpdated = true;\n    }, newIntervalTime);\n  };\n\n  return (\n    <div>\n      <h2>Bot Controls</h2>\n      <hr />\n      <div className=\"control-panel\">\n        <label htmlFor=\"randomWalk\">Toggle random walk: </label>\n        <input\n          onChange={(e) => {\n            handleToggleRandomWalk(e);\n          }}\n          checked={state.botState.randomWalk}\n          type=\"checkbox\"\n          name=\"randomWalk\"\n          id=\"randomWalk\"\n          placeholder=\"Toggle random Walk\"\n        />\n        <div className=\"radio-section\">\n          <p>Set Bot Speed: </p>\n          <div>\n            <input\n              onChange={(e) => {\n                handleBotSpeedChange(e);\n              }}\n              type=\"radio\"\n              id=\"size1\"\n              name=\"botSpeed\"\n              value=\"1\"\n              checked={state.botState.botSpeed === Bot.speed}\n            />\n            <label htmlFor=\"1\">1</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleBotSpeedChange(e);\n              }}\n              type=\"radio\"\n              id=\"size2\"\n              name=\"botSpeed\"\n              value=\"2\"\n              checked={state.botState.botSpeed === 2}\n            />\n            <label htmlFor=\"2\">2</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleBotSpeedChange(e);\n              }}\n              type=\"radio\"\n              id=\"size3\"\n              name=\"botSpeed\"\n              value=\"3\"\n              checked={state.botState.botSpeed === 3}\n            />\n            <label htmlFor=\"3\">3</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleBotSpeedChange(e);\n              }}\n              type=\"radio\"\n              id=\"size4\"\n              name=\"botSpeed\"\n              value=\"4\"\n              checked={state.botState.botSpeed === 4}\n            />\n            <label htmlFor=\"4\">4</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleBotSpeedChange(e);\n              }}\n              type=\"radio\"\n              id=\"size5\"\n              name=\"botSpeed\"\n              value=\"5\"\n              checked={state.botState.botSpeed === 5}\n            />\n            <label htmlFor=\"5\">5</label>\n          </div>\n        </div>\n        {/* <div className=\"radio-section\">\n          <p>Set Matrix size: </p>\n          <div>\n            <input\n              onChange={(e) => {\n                handleMatrixSizeChange(e);\n              }}\n              type=\"radio\"\n              id=\"size1\"\n              name=\"matrixSize\"\n              value=\"1\"\n              checked={state.gameState.matrixSize === 1}\n            />\n            <label htmlFor=\"1\">1</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleMatrixSizeChange(e);\n              }}\n              type=\"radio\"\n              id=\"size2\"\n              name=\"matrixSize\"\n              value=\"2\"\n              checked={state.gameState.matrixSize === 2}\n            />\n            <label htmlFor=\"2\">2</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleMatrixSizeChange(e);\n              }}\n              type=\"radio\"\n              id=\"size3\"\n              name=\"matrixSize\"\n              value=\"3\"\n              checked={state.gameState.matrixSize === 3}\n            />\n            <label htmlFor=\"3\">3</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleMatrixSizeChange(e);\n              }}\n              type=\"radio\"\n              id=\"size4\"\n              name=\"matrixSize\"\n              value=\"4\"\n              checked={state.gameState.matrixSize === 4}\n            />\n            <label htmlFor=\"4\">4</label>\n          </div>\n          <div>\n            <input\n              onChange={(e) => {\n                handleMatrixSizeChange(e);\n              }}\n              type=\"radio\"\n              id=\"size5\"\n              name=\"matrixSize\"\n              value=\"5\"\n              checked={state.gameState.matrixSize === 5}\n            />\n            <label htmlFor=\"5\">5</label>\n          </div>\n        </div> */}\n      </div>\n      <div className=\"panel\">\n        <button onClick={handleAddBot}>Add Bot</button>\n        <button onClick={handleRemoveBot}>Remove Bot</button>\n      </div>\n    </div>\n  );\n};\n","/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/index.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/ControlBox.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/ControlBox/GameStats.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager/index.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager/BotManager.tsx",["116"],"import React from \"react\";\nimport { BotContext } from \"../../App\";\nimport { botActionTypes } from \"../../context/actionTypes\";\nimport { Bot as BotComponent } from \"./Bot\";\nimport { Bot } from \"../../models/Bot\";\n\nexport const BotManager: React.FC = () => {\n  const { botState, botDispatch } = React.useContext(BotContext);\n\n  React.useEffect(() => {\n    window.addEventListener(\"keydown\", (e) => {\n      switch (e.code) {\n        case \"ArrowRight\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 0, distance: 10 },\n          });\n          break;\n\n        case \"ArrowLeft\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 180, distance: 10 },\n          });\n          break;\n\n        case \"ArrowUp\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 270, distance: 10 },\n          });\n          break;\n\n        case \"ArrowDown\":\n          botDispatch({\n            type: botActionTypes.MOVE_BOT,\n            data: { direction: 90, distance: 10 },\n          });\n          break;\n\n        default:\n          break;\n      }\n    });\n  }, []);\n\n  return (\n    <>\n      {\" \"}\n      {botState.bots.map((bot: any, i: number) => (\n        <BotComponent\n          key={i}\n          location={bot.getLocation()}\n          name={bot.getName()}\n          selected={bot.isSelected()}\n          id={bot.getID()}\n          dimensions={Bot.dimensions}\n        />\n      ))}\n    </>\n  );\n};\n","/home/pierre/Projects/GithubProjects/conway-react/src/components/BotManager/Bot.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/components/Matrix/Cell.tsx",[],"/home/pierre/Projects/GithubProjects/conway-react/src/models/Cell.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/BotManager.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/MapManager.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/GameManager.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/context/initialState.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/utils/calculateBotStartLocation.ts",[],"/home/pierre/Projects/GithubProjects/conway-react/src/utils/buildMatrix.ts",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":5,"column":10,"nodeType":"123","messageId":"124","endLine":5,"endColumn":13},{"ruleId":"121","severity":1,"message":"125","line":6,"column":10,"nodeType":"123","messageId":"124","endLine":6,"endColumn":26},{"ruleId":"121","severity":1,"message":"126","line":6,"column":28,"nodeType":"123","messageId":"124","endLine":6,"endColumn":40},{"ruleId":"121","severity":1,"message":"127","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":16},{"ruleId":"121","severity":1,"message":"128","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":14},{"ruleId":"121","severity":1,"message":"129","line":9,"column":10,"nodeType":"123","messageId":"124","endLine":9,"endColumn":27},{"ruleId":"121","severity":1,"message":"130","line":9,"column":29,"nodeType":"123","messageId":"124","endLine":9,"endColumn":49},{"ruleId":"121","severity":1,"message":"131","line":42,"column":9,"nodeType":"123","messageId":"124","endLine":42,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":45,"column":6,"nodeType":"134","endLine":45,"endColumn":8,"suggestions":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"@typescript-eslint/no-unused-vars","'Bot' is defined but never used.","Identifier","unusedVar","'botStartLocation' is defined but never used.","'initialState' is defined but never used.","'IState' is defined but never used.","'Cell' is defined but never used.","'randomWalkChecked' is assigned a value but never used.","'setRandomWalkChecked' is assigned a value but never used.","'handleMatrixSizeChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'botDispatch'. Either include it or remove the dependency array.","ArrayExpression",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Update the dependencies array to be: [botDispatch]",{"range":"141","text":"142"},[1181,1183],"[botDispatch]"]